#! /bin/bash
#
# C. Junghans & K. Koschke
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

#version 2.3   -- fix problem with "./" in progname
#version 2.4   -- issue with 2>>&1
#version 2.4.4 -- fixed a problem with file names with "-"
#version 2.4.5 -- change the parameter matching
#version 2.5.0 -- added nice option
#version 2.5.1 -- fixed a bug in --add
#version 2.6.0 -- allowing better short opts
#version 2.6.1 -- fixed string bug in short opts
#version 2.7.0 -- fixed the problem with too gib attachments
#version 2.7.1 -- remove base name function
#version 3.0.0 -- make more use of functions and clean up
#version 3.1.0 -- added --checkjobs --showjobs
#version 3.1.1 -- bug in start batch
#version 3.1.2 -- make use of sed
#version 3.1.3 -- added --rmjobs --showlog
#version 3.1.4 -- added --taillog
#version 3.1.5 ,16.04.08 -- better version system
#version 3.2.0 ,08.07.08 -- allows to use lammpi
#version 3.3.0 ,23.09.08 -- autogenerate of startbatch name
#version 3.4.0 ,26.09.08 -- added killjob option
#version 3.4.1 ,27.09.08 -- bug with number
#version 3.4.1 ,06.10.08 -- added --progname, --checkjob and --finish
#version 3.5.0 ,06.10.08 -- added unique job_id
#version 3.5.1 ,06.10.08 -- faster --checkjob
#version 3.6.0 ,07.10.08 -- consitency with qstart
#version 3.6.1 ,07.10.08 -- better --showjobs
#version 3.6.2 ,08.10.08 -- notemplate is not emptytemplate
#version 3.6.3 ,08.10.08 -- bug in --name
#version 3.6.4 ,08.10.08 -- bug in short opts
#version 3.6.5 ,08.10.08 -- bug in show_jobs with empty lines
#version 3.6.6 ,08.10.08 -- added --header
#version 3.6.7 ,08.10.08 -- added --show_job
#version 3.6.8 ,08.10.08 -- bug in --checkjob for remote
#version 3.6.9 ,13.10.08 -- bug in --checkjobs
#version 3.7.0 ,15.10.08 -- bug in kill_job
#version 3.7.1 ,01.12.08 -- bug in kill_job
#version 3.7.2 ,23.09.09 -- added header to batch file, which to type
#version 3.7.3 ,30.11.09 -- fixed a bug in check_exist + source bashrc
#version 3.8.0 ,22.01.10 -- major clean up
#version 3.8.1 ,22.01.10 -- rm batchname, when crashing
#version 4.0.0 ,11.02.11 -- major cleanup and rewrite
#version 4.0.1 ,17.02.11 -- fixed a bug when sourcing rcfile
#version 4.0.2 ,18.02.11 -- added chmod u+x of batchname
#version 4.0.3 ,26.05.11 -- missing a bug in hostlist
#version 4.0.4 ,27.05.11 -- fixed a bug in find_best_host
#version 4.0.5 ,01.08.11 -- fixed a bug in mktemp
#version 4.0.6 ,15.08.11 -- added script variables
#version 4.1.0 ,21.09.11 -- added --ignore-obsolete and check for defaults
#version 4.1.1 ,07.09.12 -- auto mail = $USER and fixed find_best_host
#version 4.1.2 ,19.02.13 -- added ssh_opts and set BatchMode=yes in there

#############################################################
# NEVER EVEN change settings below, but in your ~/.qstartrc #
# because --selfupdate will overwrite it !                  #
#############################################################

#BEGIN DEFAULTS
#defaults options, uncomment and change only the lines you really need to change
#keep it in bash style, source must work on this file

############## QUEUE/SUBMIT stuff #########
#name of the host, where to submit the jobs
#'BEST' = to the best host
submit_host="$HOSTNAME"
#submit the script by default: yes/no
submit="yes"
#default number of cpus to use
ncpus=1
#list of possible hosts
hostlist=

########### MPI stuff ###############
#should mpirun (or equivalent) be added: yes/no
mpi_job="yes"
#the command to add for mpi jobs
mpirun_cmd="mpirun"

############# Script option ########
#default trunc name of the submit script
name="l"
#template to add to the script name
template="_XXXXX"
#automatically naming of the script: yes/no
auto="no"
#add timing commands: yes/no
time="no"
#file to create if jobs is finished
finish_file=""
#file to source before running the command
extra_source=""
#default option if none are given on the command line
default_opts=""
#extra code to put in script after changing to the PWD and copy of files
# but before running the job
extra_begin_code=""
#extra code to put in script after running the job, but before copy back
extra_end_code=""
#default nice level of the script
nice="19"
#number of lines of logfile to send by email
lines='100'

########### other options #####
#be quiet or not: yes/no
quiet="no"
#run in script mode: yes/no
scriptmode="no"
#wait for the jobs to finish: yes/no
wait="no"
#sec to wain in the --wait loop
sleeptime=900
#default email adress
#empty/none = no email, auto = leave it to queue where to send the mail
mail="none"
#header to show with --showjobs option
header="LOCAL JOBS"
#shell to be used by default, none=bash
myshell="${SHELL##*/}"
#ignore if we are using a obsolete version
ignore_obsolete="no"
#END DEFAULTS

#internal options not set in rcfile
#usage print out
usage="${0##*/} [OPTIONS] COMMAND [options]"
#internal for set command, empty for bash, but 'set' for tcsh
set=""
#was the connection already checked
checked_connection="no"
#if the job submit directly
direct_submit="no"
#user given script name
batchname=""
#user given log file name
logfile=""
#rc to read
rcfile="~/.${0##*/}rc"
#local of file to member running jobs
jobfile="$HOME/.runingjobs"
#where to look for updates
branch=lanl
selfurl="http://job-tools.cj-overlay.googlecode.com/hg/lstart?r=$branch"
fileurl="~junghans/bin/lstart"
ssh_opts="-o ConnectTimeout=15 -o BatchMode=yes"

qecho() {
  [[ "$quiet" = "no" ]] && echo -e "$@"
}

die() {
  [ -z "$1" ] || echo -e "$@" >&2
  [ "$direct_submit" = "no" ] && [ -n "$batchname" ] && [ -f "$batchname" ] && rm -f "$batchname" && die "batchfile $batchname removed"
  exit 1
}

run_on_host() {
  local message ssh
  [ -z "$1" ] && die "run_on_host: Missing argument"
  [ "$submit_host" = "BEST" ] && die "Internal error BEST is a virtual hostname, please file a bug"
  if [ "$HOSTNAME" = "$submit_host" ]; then
    ssh="bash -c"
  else
    if [ "$checked_connection" = "no" ]; then
      ssh $ssh_opts $submit_host true || die "Heuristic connection check failed.
Change 'submit_host' variable in your setting file ($rcfile), which is now set to '$submit_host'.

To generate a setting file run:
   '${0##*/} --showdefaults > $rcfile'"
      checked_connection="yes"
    fi
    ssh="ssh $ssh_opts $submit_host"
  fi
  message=$($ssh "$*" 2>&1) || die "$ssh '$*' failed\nError message: $message"
  [ -z "$message" ] || echo -e "$message"
}

check_job() {
  local submit_host pid message
  [ -z "$1" ] && die "check_job: Missing argument"
  number_check "$1" "--checkjob"
  submit_host=$(show_column $1 5) || die
  pid=$(show_column $1 6) || die
  message=$(run_on_host "ps -p $pid || true") || die
  if [ -z "${message/*$pid*}" ]; then
     qecho "Job $1: pid $pid on $submit_host found"
     return 0
  else
    qecho "Job $1: pid $pid on $submit_host NOT found"
    return 1
  fi
}

check_jobs(){
  local i
  check_jobfile
  failed="no"
  for i in $(awk '{print $1}' $jobfile); do
    check_job $i || failed="yes"
  done
  [ "$failed" = "yes" ] && return 1
  return 0
}

pcheck_job() {
  local job_id myjobs failed
  [ -n "$1" ] || die "pcheck_job: No pattern given"
  myjobs="$(print_jobids $1)" || die
  if [ -z "$myjobs" ]; then
    qecho "No jobs matching $1 found"
    return 1
  fi
  failed="yes"
  for job_id in $myjobs; do
    check_job $job_id && failed="no"
  done
  [ "$failed" = "yes" ] && return 1
  return 0
}

kill_job() {
  local submit_host pid gpid pids
  [ -z "$1" ] && die "kill_job: Missing argument"
  number_check "$1" "--killjob"
  submit_host=$(show_column $1 5) || die
  pid=$(show_column $1 6) || die
  run_on_host "ps --ppid $pid -o pid= | xargs kill" ||
    die "Could kill childs of pid $pid\nYou may want to run '${0##*/} --rmjob $1' to remove it from the jobfile"
}

submit_job() {
  local path line JOB_ID
  [ -z "$1" ] && die "submit_job: missing argument"
  [ -f "$1" ] || die "Could not find $1"
  path="$(get_path_from_script $1)" || die
  [ "$submit_host" = "BEST" ] && find_best_host
  JOB_ID="$(get_jobid_from_script $1)" || die
  echo "$JOB_ID $batchname $PWD $logfile $submit_host XXX(not started yet)" >> $jobfile
  run_on_host "nohup $PWD/$1 &" || die
  qecho "Submitted to $submit_host"
}

print_jobids() {
  local job_id
  check_jobfile
  [ -n "$1" ] || die "print_jobids: Expect a pattern"
  for job_id in $(awk "(\$4 ~ /${1:0:8}/){print \$1}" $jobfile); do
    echo $job_id
  done
}

pkill_job() {
  local job_id failed myjobs
  [ -n "$1" ] || die "pkill_job: Expect a pattern"
  myjobs="$(print_jobids $1)" || die
  for job_id in $myjobs; do
    kill_job $job_id || failed="yes"
  done
  [ "$failed" = "yes" ] || return 1
  return 0
}

job_exist() {
  [ -z "$1" ] && die "job_exist: Missing argument"
  check_jobfile
  [ -z "$(awk -v id="$1" '($1==id){print $0}' $jobfile)" ] && die "Job $1 not found !"
  return 0
}

show_column() {
  local value
  [ -z "$2" ] && die "show_column: Missing argument"
  job_exist $1
  value="$(awk -v id="$1" -v co="$2" '($1==id){print $co}' $jobfile)"
  [[ -z "$value" ]] && die "show_column: Could not get value nr $2 for job $1"
  echo "$value"
  return $?
}

check_jobfile() {
  [ -r "$jobfile" ] || die "Jobfile '$jobfile' not readable or not found!"
  return 0
}

rm_job() {
  [ -z "$1" ] && die "jm_job: Missing argument"
  number_check "$1" "--rmjob"
  sed -i "/^$1 /d" $jobfile || die "rm_job: sed failed"
  qecho Job $1 removed from jobfile
}

get_next_free_jobid() {
  local max i
  #if there is now jobfile we can start with one
  [ ! -r "$jobfile" ] && echo "1" && return 0
  max=1
  for i in $(awk '/^[^#]/{print $1}' $jobfile); do
    #i is not a number
    [ -z "${i//[0-9]}" ] || continue
    [ $i -ge $max ] && max=$(($i+1))
  done
  echo "$max"
}

find_best_host() {
  local host uptime procs xhost xload
  [ -n "$hostlist" ] || die "find_best_host: no hostlist given, use --hostlist option" 
  [ -f "$hostlist" ] || die "find_best_host: could not find listhost '$hostlist' (give it with --hostlist)"
  xload="-100"
  xhost=BEST
  for host in $(<$hostlist); do
    qecho -n "Checking $host..."
    uptime=$(ssh $ssh_opts $host uptime 2>/dev/null) || uptime=XXX
    [ "$uptime" = "XXX" ] && echo " failed (ssh)" && continue
    procs=$(ssh $ssh_opts $host "grep -c processor /proc/cpuinfo" 2>/dev/null) || procs=0
    [ "$procs" -eq 0 ] && echo " failed (ssh)" && continue
    uptime="$(echo "$uptime" | sed -n 's/^.*:\([^:,]*\),\([^,]*\),\([^,]*\)*$/\1/p')"
    [ -z "$uptime" ] && qecho " failed (load calc)" && continue
    uptime="$(awk -v c="$procs" -v l="$uptime" 'BEGIN{print c-l;}')"
    [ -z "$uptime" ] && qecho " failed (load cmp)" && continue
    if [ "$(awk -v l="$uptime" -v l2="$xload" 'BEGIN{print (l>l2)?"yes":"no";}')" = "yes" ]; then
      xload="$uptime"
      xhost="$host"
    fi
    qecho "success (free $uptime)"
  done
  [ "$xhost" = "BEST" ] && die "find_best_host: no useable host found"
  submit_host="$xhost"
  #qecho "Best host is $submit_host"
}

show_jobs() {
  check_jobfile
  [[ -n "$(sed '/^$/d' $jobfile)" ]] || exit 0
  echo JOB_ID HOSTNAME pid name PWD logfile batchfile
  sed '/^$/d' $jobfile
}

number_check(){
  local number option
  [ -z "$2" ] && die "number_check: Missing argument"
  number="$1"
  option="$2"
  [ -z "$number" ] && die "Missing number in $option"
  [ -n "${number//[0-9]}" ] && die "Argument after $option should be a number"
}

get_version() {
  sed -ne 's/^#version[[:space:]]*\([^[:space:]]*\)[[:space:]]*,.*$/\1/p' $1 | sed -n '$p'
}

version_check() {
  local old_version="$(get_version $0)"
  if ! version="$(wget -qO- "${selfurl}" 2>/dev/null )"; then
    [[ -r $(eval echo $fileurl) ]] && version=$(<$(eval echo $fileurl))
  fi
  version="$(echo -e "${version}" | get_version)"
  if [[ $1 = "-q" ]]; then
    [[ -z $version ]] && return 1
  else
    [[ -z $version ]] && die "Could not get upstream version"
    echo "Upstream Version: $version"
    echo "Local Version: $old_version"
  fi
  expr "${old_version}" \< "${new_version}" > /dev/null
  return $?
}

self_update() {
  if version_check; then
    echo "I will try replace myself now with the upstream version (CTRL-C to stop)"
    sleep 5
    wget -O "${0}" "${selfurl}" 2>/dev/null || cp -H $(eval echo $fileurl) $0
  else
    echo "No update needed"
  fi
}

showhelp() {
 cat << eoh
    A script to start $header.
    It builds a very simple submit script (see -p options) and
    run them.

    $usage

    (later options overwrite previous ones, short options can be concatenated)

    SCRIPT OPTIONS:
    -n, --name NAME      Change trunc name of script
                         Default: $name
ADV     --batch NAME     Change name of the submit script
ADV                      Default:  \$(mktemp ${name}$template)
ADV                      (Argument is NAME+TEMPLATE)
ADV -l, --log NAME       Change name of the output file
ADV                      Default: "batch".log
ADV     --template TEXT  Change template for mktemp
ADV                      Default: $template
ADV -a, --auto           Use first argument as name
ADV     --script         Will use the argument as base scripts and concatenate them
ADV                      (implies --nompi)
ADV -e, --emptytemplate  Same as --template ""
ADV -m, --mail NAME      send mail to NAME
ADV                      default: '$mail' (use 'auto' for automatic)
ADV -f, --finish NAME    Touches file NAME when succesfully finished
ADV -t, --time           Adds a date command before and after the command
    -p, --print          Only print the submit script (implies --nosubmit)
ADV     --nosubmit       Do submit the script, only create it (useful with --submit)
ADV     --submit   FILE  Submit the script FILE
ADV -w, --wait           Waits for the job to finish
ADV                      Exit status from existence of FILE from --finish or --resubmit
ADV     --sleeptime      Changes the sleeptime for --wait
ADV                      Default: $sleeptime
ADV    --nice     NUMBER Change nice factor
ADV                      Default: '$nice'
ADV     --lines          change number of last lines of the logfile in the mail
ADV                      Default: '$lines'
ADV     --shell NAME     Change the shell to use, script will sources ~/.XXXrc
ADV                      Default: $myshell
ADV     --source FILE    Source this file before run the progam

    QUEUE OPTIONS:
    -N                   Number of cpus
                         Possible: whatever
                         Default: $ncpus
ADV     --nompi          This is NOT a mpi job, so do NOT add mpirun (or equivalent)
ADV                      to the command line (automatic for ncpus = 1)
ADV     --runat HOST     Specify the host to run yourself
ADV -b, --best           Run at the maschine with the lowest load (needed --hostlist)
ADV     --hostlist       List of possible hosts to be used by --best


    JOBS OPTIONS:
        --showjobs        Show my jobs running
ADV     --checkjob JOB_ID Return true if job is still running (useful with -f)
ADV                       "while ${0##*/} -q --checkjob JOB_ID; do :; done"
ADV     --pcheck PATTERN  Return true if at least one job matching a pattern is still running
ADV                       PATTERN is search in the name column (useful with -f)
ADV                       "while ${0##*/} -q --pcheck NAME; do :; done"
        --showlog  JOB_ID Show logfile for running job with number JOB_ID
ADV     --showdir  JOB_ID Show pwd of simulation
ADV     --taillog  JOB_ID Same as --showlog but tail and follow
        --killjob  JOB_ID Kill job with number JOB_ID
ADV     --pkill PATTERN   Kill all jobs matching a pattern
ADV     --getjid PATTERN  Retrun the ids of all jobs matching PATTERN
ADV     --checkjobs       Check if all jobs still exist
ADV     --rmjob    JOB_ID Remove job with JOB_ID from jobfile
ADV                       (useful after crash)
ADV     --header          Show info header

    COMMON OPTIONS:
ADV     --                 End of options (if program starts with -)
ADV -q, --quiet            Be quiet
        --rcfile FILE      Extra setting file with defaults to read
                           Default: read only $rcfile if exist
ADV     --showdefaults     Show the default settings before reading $rcfile and the
ADV                        file given by --rcfile, useful to create own rcfile with:
ADV                        "${0##*/} --showdefaults > $rcfile"
ADV     --ignore-obsolete  Do not stop if ${0##*/} is obsolete
ADV -v, --version          Prints version
        --selfupdate       Do a self update from googlecode
    -h, --help             Show short help message
        --longhelp         Show long help message

ADV Note for script variables:
ADV --------------------------
ADV The following variables are available in the batch script and can be used
ADV - npcu = Number of used cpus

    Examples:
       ${0##*/} -8p sleep 30
       ${0##*/} -8p --nompi mpirun -np 8 sleep 30
       ${0##*/} --name gromacs mdrun -v
       ${0##*/} -8 mdrun_mpi
       ${0##*/} echo -e 'SOL\\\\nSOL' \| g_rdf -b 100 -n index.ndx

    Send comments and bugs to: junghans@lanl.gov
eoh
}

show_logs() {
  local path logfile
  [ -z "$2" ] && die "show_logfile: Missing argument"
  path=$(show_path $1) | die
  logfile=$(show_column $1 4) || die
  #add path if logfile does not contain /
  [ -n "${logfile/*\/*}" ] && logfile="${path}/$logfile"
  [ -r "$logfile" ] || die "Logfile ($logfile) not readable or not found!"
  $2 $logfile
  return $?
}

show_path() {
  local path
  path=$(show_column $1 3) || die
  [[ -d "$path" ]] || die "show_path: $path is not a dir"
  echo "$path"
  return $?
}

get_path_from_script(){
  local path
  [ -z "$1" ] && die "get_path_from_script: Missing argument"
  [ -f "$1" ] || die "get_path_from_script: Could not found '$1'"
  [ -z "$(grep -e "${0##*/}" $1)" ] && die "$1 seems NOT to be a '${0##*/}' script"
  path="$(awk '/^cd/{print $2;exit 0}' $1)" || die "get_path_from_script: awk failed"
  [ -z "$path" ] && die "get_path_from_script: found not grep path from $1"
  echo "$path"
}

get_jobid_from_script(){
  local id
  [ -z "$1" ] && die "get_jobid_from_script: Missing argument"
  [ -f "$1" ] || die "get_jobid_from_script: Could not found script '$1'"
  [ -z "$(grep -e "${0##*/}" $1)" ] && die "$1 seems NOT to be a '${0##*/}' script"
  id="$(sed -n 's/^echo "Renice job \(.*\) and childs"/\1/p' $1)" || die "get_jobid_from_script: sed failed"
  number_check "$id" "get_jobid_from_script"
  echo "$id"
}

if [ -z "$(type -p mktemp)" ]; then
  mktemp() {
    [[ $1 = "-u" ]] && shift
    [[ -z $1 ]] && die "mktemp: missing argument"
    [[ -z ${1##*X} ]] || die "mktemp: argument has to end at least with X"
    local end trunc i l tmp newend
    end=${1##*[^X]}
    trunc=${1%${end}}
    l=${end//[^X]}
    l=${#l}
    while true; do
      newend="$end"
      for ((i=0;i<$l;i++)); do
        newend="${newend/X/${RANDOM:0:1}}"
      done
      tmp="${trunc}${newend}"
      [[ -f $tmp ]] || break
    done
    echo "$tmp"
  }
  export -f mktemp
fi

################################################
############## Main Program ####################
################################################
shopt -s extglob

cmdline="${0##*/}"
for i in "$@"; do
  [ -z "${i//*[[:space:]]*}" ] && cmdline="${cmdline} '$i'" || cmdline="${cmdline} $i"
done

if [ -f ${rcfile/\~/$HOME} ]; then
  source ${rcfile/\~/$HOME} || die "Error when sourcing $rcfile, correct it or remove it"
  qecho "I have sourced $rcfile"
fi

while [ "${1#-}" != "$1" ]; do
  if [ "${1#--}" = "$1" ] && [ -n "${1:2}" ]; then
    if [ "${1#-[nlmfr]}" != "${1}" ]; then
      set -- "${1:0:2}" "${1:2}" "${@:2}"
    else
      set -- "${1:0:2}" "-${1:2}" "${@:2}"
    fi
 fi
 case $1 in
  --rcfile )
   rcfile="$2"
   source $rcfile || die "Error when sourcing $rcfile, correct it or remove it"
   qecho "I have source $rcfile"
   shift 2;;
  --showdefaults )
   sed -ne '/^#BEGIN DEFAULTS/,/^#END DEFAULTS/p' $0 | sed -e '1d' -e '$d' -e '/^[^#]/s/^/#/'
   exit 0;;
  --ignore-obsolete )
   ignore_obsolete="yes"
   shift;;
  -[0-9] )
   ncpus=${1#-}
   number_check "$ncpus" "$1"
   shift;;
  -p | --print )
   batchname="/dev/stdout"
   submit="no"
   shift;;
  -q | --quiet )
   quiet="yes"
   shift;;
   -l | --log )
   logfile="$2"
   shift 2;;
   --batch )
   batchname="$2"
   shift 2;;
   -n | --name )
   name="$2"
   shift 2;;
   -f | --finish )
   finish_file="$2"
   shift 2;;
   -a | --auto )
   auto="yes"
   shift ;;
  --script )
   scriptmode="yes"
   mpi_job="no"
   shift ;;
   --nosubmit | --norun)
   submit="no"
   shift ;;
   --submit)
   direct_submit="yes"
   submit_job "$2"
   exit $? ;;
   --template )
   template="$2"
   shift 2;;
   -e | --emptytemplate )
   template=""
   shift ;;
   -t | --time )
   time="yes"
   shift ;;
   -w | --wait)
   wait="yes"
   shift 1;;
  --sleeptime)
   number_check "$2" "--sleeptime"
   sleeptime="$2"
   shift 2;;
  --nice)
   nice="$2";
   number_check "$nice" "--priority"
   if [ $nice -lt 0 ] || [ $nice -gt 19 ]; then
      die "argument after --nice should be a number between 0-19"
   fi
   shift 2;;
  --lines)
   lines="$2"
   number_check "$lines" "--lines"
   [ $lines -lt 1 ] && die "argument after --lines should be a number greater 0"
   shift 2 ;;
  --header)
   echo $header
   exit ;;
   -m | --mail)
   mail="$2"
   shift 2 ;;
   --shell)
   myshell="$2"
   shift 2 ;;
   --source)
   extra_source="$2"
   shift 2 ;;
   --nompirun | --nompi)
   mpi_job="no"
   shift ;;
   --runat )
   submit_host="$2"
   shift 2;;
   -b | --best )
   submit_host="BEST"
   shift;;
  --hostlist )
   hostlist="$2"
   shift 2;;
   --showjobs )
   show_jobs
   exit $?;;
   --killjob )
   kill_job $2
   exit $?;;
   --statjob )
   stat_job $2
   exit $?;;
   --getjid )
   print_jobids "$2"
   exit $?;;
   --pkill )
   pkill_job "$2"
   exit $?;;
   --checkjob )
   check_job $2
   exit $?;;
  --checkjobs)
   check_jobs
   exit $?;;
   --pcheck )
   pcheck_job $2
   exit $?;;
   --showdir )
   show_path "$2"
   exit $?;;
   --showlog )
   show_logs "$2" "cat"
   exit $?;;
   --taillog )
   show_logs "$2" "tailf"
   exit $?;;
  --rmjob)
   rm_job "$2"
   exit $?;;
  -v | --version)
   echo "${0##*/}, version $(get_version $0) ($branch branch) by C. Junghans & K. Koschke"
   exit 0;;
  --selfupdate)
   self_update
   exit $?;;
  --hg)
   echo "${0##*/}: $(sed -ne 's/^#version.* -- \(.*\)$/\1/p' $0 | sed -n '$p')"
   exit 0;;
  -h | --help)
   showhelp | sed -e '/^ADV /d' -e 's/^    //'
   exit 0;;
  --longhelp)
   showhelp | sed -e 's/^ADV/   /' -e 's/^    //'
   exit 0;;
  --)
   shift
   break;;
  *)
   die "Unknown option '$1'";;
 esac
done

if version_check -q; then
  x=${0##*/}; x=${x//?/#}; y=${x//?/ }
  echo "##################################$x"
  echo "# Your version of ${0##*/} is obsolete ! #"
  echo "# Please run '${0##*/} --selfupdate' or  #"
  echo "# use '--ignore-obsolete' option ${y}#"
  echo "##################################$x"
  unset x y
  [[ $ignore_obsolete = "yes" ]] || die
fi

if [[ -n $(type -p sha1sum) ]] && [[ $(${0} --showdefaults | sha1sum) != "85c19f88f5103a2ccaf53acfb987b853b2c18ee7  -" ]]; then
  x=${0##*/}; x=${x//?/#}; y=${x//?/ }
  echo "###########################################$x$x"
  echo "# You have modified ${0##*/} internal settings !  $y#"
  echo "# Please do not do that as '${0##*/} --selfupdate'$y#"
  echo "# will overwrite them. Just run:          $y$y#"
  echo "# '${0##*/} --showdefaults > $rcfile'               #"
  echo "# and modify $rcfile                        $y#"
  echo "###########################################$x$x"
  unset x y
fi

if [ -z "$1" ]; then
  [ -z "${default_opts}" ] && die "Missing program name (try --help)"
  set -- ${default_opts}
fi

[[ $auto = "yes" ]] && name=${1##*/}

if [ -z "$batchname" ]; then
  #template contains no 'X'
  if [ -z "${template//[^X]}" ]; then
    batchname="${name}"
  else
    batchname=$(mktemp -u ${name}${template}) || die "mktemp could not generate file"
  fi
  touch ${batchname}
fi

if [ -z "$logfile" ]; then
  if [ "$batchname" = "/dev/stdout" ]; then
    logfile="$name.log"
  else
    logfile="$batchname.log"
  fi
fi

if [ "$batchname" != "/dev/stdout" ]; then
  qecho "submit script: $batchname"
  qecho "logfile: $logfile"
fi

if [ "$myshell" = "bash" ] || [ "$myshell" = "none" ]; then
  echo "#! /bin/bash" > $batchname
elif [ "$myshell" = "zsh" ]; then
  echo "#! /usr/bin/zsh" > $batchname
elif [ "$myshell" = "tcsh" ]; then
  echo "#! /bin/tcsh" > $batchname
  set="set "
else
  die "Unsupported shell"
fi

if [ "$myshell" = "bash" ]; then
  [ -f ~/.bashrc ] && sh_source="source ~/.bashrc"
elif [ "$myshell" = "zsh" ]; then
  [ -f ~/.zshrc ] && sh_source="source ~/.zshrc"
elif [ "$myshell" = "tcsh" ]; then
  if [ -f ~/.tcshrc ]; then
    sh_source="source ~/.tcshrc"
  elif [ -f ~/.cshrc ]; then
    sh_source="source ~/.cshrc"
  fi
fi

JOB_ID=$(get_next_free_jobid) || die
cat <<EOF >> $batchname
#This script is generated by $USER@$HOSTNAME
#on $(date)
#by the command "$cmdline"
#using ${0##*/}, version $(get_version $0)

cd $PWD
exec > $logfile 2>&1
echo "Renice job $JOB_ID and childs"
renice $nice -p \$\$

sed -i '/^$JOB_ID /d' $jobfile
echo "$JOB_ID $batchname $PWD $logfile \$HOSTNAME \$\$" >> $jobfile

${sh_source}

#BEGIN useful script variables
${set}ncpus=${ncpus}
#END useful script variables

echo Hi, I am job $JOB_ID on \$HOSTNAME in \$PWD
EOF

if [ -n "$extra_source" ]; then
  $(source $extra_source) || die "sourcing of file after --source failed, please check again"
  echo "source $extra_source" >> $batchname
fi
if [ -n "${extra_begin_code}" ]; then
  cat <<EOF >>$batchname
#BEGIN of extra begin code
${extra_begin_code}
#END of extra begin code
EOF
fi

echo echo Starting simulation in \$PWD >> $batchname

[[ "$time" = "yes" ]] && echo date >> $batchname
if [ "$scriptmode" = "yes" ]; then
  for i in $@; do
    [ -f "$i" ] || die "File '$i' not found"
    cat "$i" >> $batchname
  done
  cmdline=""
else
  #do not add quotes to the first argument
  cmdline="$1"
  shift
  for i in "$@"; do
    [ -z "${i//*[[:space:]]*}" ] && cmdline="${cmdline} '$i'" || cmdline="${cmdline} $i"
  done
  if [ "$mpi_job" = "yes" ] && [ $ncpus -gt 1 ]; then
    cmdline="$mpirun_cmd -np $ncpus $cmdline"
  fi
fi

cat <<EOF >>$batchname
$cmdline
${set}result=\$?
[ \$result -ne 0 ] && echo "Job $JOB_ID finished unhappy!"
EOF

if [ -n "${extra_end_code}" ]; then
  cat <<EOF >>$batchname
#BEGIN of extra end code
${extra_end_code}
#END of extra end code
EOF
fi

[[ "$time" = "yes" ]] && echo date >> $batchname
echo "#remove job from jobfile" >> $batchname
echo "sed -i '/^$JOB_ID /d' $jobfile" >> $batchname

[ -z "$finish_file" ] || echo "[ \$result -eq 0 ] && touch '$finish_file'" >> $batchname

#To mail or not to mail
if [ -z "$mail" ] || [ "$mail" = "none" ]; then
  :
else
[ "$mail" = "auto" ] && mail="$USER"
   cat >> $batchname << EOF
#mailstuff
if [ \$result -eq 0 ]; then
  tail -$lines $logfile | mail -s '${0##*/}: $batchname finished ($logfile)' $mail
else
  tail -$lines $logfile | mail -s '${0##*/}: $batchname aborted ($logfile)' $mail
fi
EOF
fi
chmod u+x $batchname

if [ "$submit" = "no" ]; then
  [[ "$batchname" != "/dev/stdout" ]] && qecho "to submit the script run: '${0##*/} --submit $batchname'"
  exit 0
fi

submit_job $batchname

if [ "$wait" = "yes" ]; then
  qecho "Waiting for $batchname to finish"
  quiet="yes"
  while pcheck_job $batchname; do
    sleep $sleeptime;
  done
  [[ -n "${finish_file}" ]] && [[ ! -f "$finish_file" ]] && exit 1
  [[ -n "${resubmit_file}" ]] && [[ ! -f "$resubmit_file" ]] && exit 1
  exit 0
fi
