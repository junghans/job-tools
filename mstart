#! /bin/bash
#
# C. Junghans
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

#version 0.1   ,25.04.12 -- initial version from q2start (MPIP)
#version 0.1.1 ,07.09.12 -- first kind of working version
#version 0.1.2 ,25.04.13 -- fixed a bug in rcfile generation
#version 0.1.3 ,03.05.13 -- fixed in kill_job
#version 0.2.0 ,10.06.13 -- added nddes/cnodes + cores_per_node

#############################################################
# NEVER EVEN change settings below, but in your ~/.mstartrc #
# because --selfupdate will overwrite it !                  #
#############################################################

#BEGIN DEFAULTS
#defaults options, uncomment and change only the lines you really need to change
#keep it in bash style, source must work on this file

############## QUEUE stuff #########
#path to queue utils need later on
queue_path="/opt/MOAB/bin"

#command to submit a job
job_submit="$queue_path/msub"
#command to get status
job_status="$queue_path/checkjob"
#command to get job list
job_list="$queue_path/ljobs"
#command to cancel/delete a job
job_kill="$queue_path/canceljob"
#get information for queue
queue_info="$queue_path/mdiag"
#extra options for submit
submit_opts=""
#submit the script by default: yes/no
submit="yes"
#cores per node
cores_per_node=8
#default number of cpus to use
ncpus=${cores_per_node}
#default wall clock time
wall_time="36:00:00"
#on which node to run by default, empty = no default
hostname=""
#overwrite the queue to be used this, empty = normal queue
specialq=""

########### MPI stuff ###############
#should mpirun (or equivalent) be added: yes/no
mpi_job="yes"

############# Script option ########
#default trunc name of the submit script
name="m"
#template to add to the script name
template="_XXXXX"
#automatically naming of the script: yes/no
auto="no"
#add timing commands: yes/no
time="no"
#use scratch space by default: yes/no
scratch="no"
#base dir to scratch space
scratch_dir="/scratch2/"
#file to create if jobs is finished
finish_file=""
#rebsumit the job until this file exists
resubmit_file=""
#file to source before running the command
extra_source=""
#default option if none are given on the command line
default_opts=""
#extra code to put in script after changing to the PWD and copy of files
# but before running the job
extra_begin_code=""
#extra code to put in script after running the job, but before copy back
extra_end_code=""

########### other options #####
#be quiet or not: yes/no
quiet="no"
#run in script mode: yes/no
scriptmode="no"
#wait for the jobs to finish: yes/no
wait="no"
#sec to wain in the --wait loop
sleeptime=900
#default email adress
#empty/none = no email, auto = leave it to queue where to send the mail
mail="none"
#name to show with --showjobs and --header option
cluster_name="conejo"
#shell to be used by default, none=bash
myshell="${SHELL##*/}"
#END DEFAULTS

#internal options not set in rcfile
#usage print out
usage="${0##*/} [OPTIONS] COMMAND [options]"
#internal for set command, empty for bash, but 'set' for tcsh
set=""
#was the connection already checked
checked_connection="no"
#if the job submit directly
direct_submit="no"
#user given script name
batchname=""
#user given log file name
logfile=""
#rc to read
rcfile="~/.${0##*/}rc"
#where to look for updates
branch="lanl"
selfurl="http://job-tools.cj-overlay.googlecode.com/hg/mstart?r=$branch"
fileurl="~junghans/bin/mstart"

qecho() {
  [[ "$quiet" = "no" ]] && echo -e "$*"
}

die() {
  [ -z "$1" ] || echo -e "$*" >&2
  [ "$direct_submit" = "no" ] && [ -n "$batchname" ] && [ -f "$batchname" ] && rm -f "$batchname" && die "batchfile $batchname removed"
  exit 1
}

check_job() {
  local message
  number_check "$1" "--checkjob"
  message=$($job_list -u $USER) || die
  if [ -z "$(echo -e "$message" | awk "(\$1==$1){print \$0}")" ]; then
    qecho "Job '$1' MOT found on $cluster_name"
    return 1
  else
    qecho "Job '$1' found on $cluster_name_host found"
    return 0
  fi
}

pcheck_job() {
  local job_id myjobs failed
  [ -n "$1" ] || die "pcheck_job: No pattern given"
  myjobs="$(print_jobids $1)" || die
  if [ -z "$myjobs" ]; then
    qecho "No jobs matching $1 found"
    return 1
  fi
  failed="yes"
  for job_id in $myjobs; do
    check_job $job_id && failed="no"
  done
  [ "$failed" = "yes" ] && return 1
  return 0
}

kill_job() {
  number_check "$1" "--killjob"
  $job_kill $1
  return $?
}

stat_job() {
  number_check "$1" "--statjob"
  $job_status $1
  return $?
}

submit_job() {
  local message path
  [ -z "$1" ] && die "submit_job: missing argument"
  [ -f "$1" ] || die "Could not find $1"
  path="$(get_path_from_script $1)" || die
  message="$(cd $path;$job_submit $submit_opts $1)" || die
  qecho "$message"
}

print_jobids() {
  local message job_id
  [ -n "$1" ] || die "print_jobids: Expect a pattern"
  message=$($job_list -u $USER) || die
  for job_id in $(echo -e "$message" | awk "(\$3 ~ /${1}/){print \$1}"); do
    echo $job_id
  done
}

pkill_job() {
  local job_id failed myjobs
  [ -n "$1" ] || die "pkill_job: Expect a pattern"
  myjobs="$(print_jobids $1)" || die
  for job_id in $myjobs; do
    kill_job $job_id || failed="yes"
  done
  [ "$failed" = "yes" ] || return 1
  return 0
}

number_check(){
  local number option
  [ -z "$1" ] && die "number_check: Missing argument"
  number="$1"
  option="$2"
  [ -z "$number" ] && die "Missing number in $option"
  [ -n "${number//[0-9]}" ] && die "Argument after $option should be a number"
}

walltime_to_sec() {
  local secs wall
  [ -z "$1" ] && die "walltime_to_sec: Missing argument"
  [ -z "${1/[0-9][0-9]:[0-9][0-9]:[0-9][0-9]}" ] || die "Wall clock time should have the format HH:MM:SS"
  wall="$1"
  secs=${wall##*:}
  wall=${wall%:??}
  # 10# fixes basis to 10, and hence avoids 08 being interpreted as octal
  secs=$(( 10#$secs + 60*10#${wall##*:} ))
  wall=${wall%:??}
  secs=$(( 10#$secs + 3600*10#${wall##*:} ))
  echo "$secs"
}

queue_info() {
  local queue
  if [[ -n $specialq ]]; then
    $queue_info -c $specialq
  elif [[ -n $1 ]]; then
    $queue_info -c $1
  else
    $queue_info -c
  fi
  return $?
}

get_version() {
  sed -ne 's/^#version[[:space:]]*\([^[:space:]]*\)[[:space:]]*,.*$/\1/p' $1 | sed -n '$p'
}

version_check() {
  local old_version="$(get_version $0)"
  if ! version="$(wget -qO- "${selfurl}" 2>/dev/null )"; then
    [[ -r $(eval echo $fileurl) ]] && version=$(<$(eval echo $fileurl))
  fi
  version="$(echo -e "${version}" | get_version)"
  if [[ $1 = "-q" ]]; then
    [[ -z $version ]] && return 1
  else
    [[ -z $version ]] && die "Could not get upstream version"
    echo "Upstream Version: $version"
    echo "Local Version: $old_version"
  fi
  expr "${old_version}" \< "${new_version}" > /dev/null
  return $?
}

self_update() {
  if version_check; then
    echo "I will try replace myself now with the upstream version (CTRL-C to stop)"
    sleep 5
    wget -O "${0}" "${selfurl}" 2>/dev/null || cp -H $(eval echo $fileurl) $0
  else
    echo "No update needed"
  fi
}

showhelp() {
 cat << eoh
    A script to start job of $cluster_name.
    It builds a very simple submit script (see -p options) and
    run it.

    $usage

    (later options overwrite previous ones, short options can be concatenated)

    SCRIPT OPTIONS:
    -n, --name NAME      Change trunc name of script
                         Default: $name
ADV     --batch NAME     Change name of the submit script
ADV                      Default:  \$(mktemp ${name}$template)
ADV                      (Argument is NAME+TEMPLATE)
ADV -l, --log NAME       Change name of the output file
ADV                      Default: "batch".log
ADV     --template TEXT  Change template for mktemp
ADV                      Default: $template
ADV -a, --auto           Use first argument as name
ADV     --script         Will use the argument as base scripts and concatenate them
ADV                      (implies --nompi)
ADV -e, --emptytemplate  Same as --template ""
ADV -m, --mail NAME      send mail to NAME
ADV                      default: '$mail' (use 'auto' for automatic)
ADV -f, --finish NAME    Touches file NAME when succesfully finished
ADV -t, --time           Adds a date command before and after the command
    -p, --print          Only print the submit script (implies --nosubmit)
ADV     --nosubmit       Do submit the script, only create it (useful with --submit)
ADV     --submit   FILE  Submit the script FILE
ADV -r, --resubmit FILE  Resub the script if exit status was 0 and FILE not exist
ADV -w, --wait           Waits for the job to finish
ADV                      Exit status from existence of FILE from --finish or --resubmit
ADV     --sleeptime      Changes the sleeptime for --wait
ADV                      Default: $sleeptime
ADV     --shell NAME     Change the shell to use, script will sources ~/.XXXrc
ADV                      Default: $myshell
ADV     --source FILE    Source this file before run the progam
ADV     --scratch        Use scratch on "$scratch_dir/\$USER/"
ADV     --needed FILES   Give the files needed to be copy to the scratch dir to
ADV                      run, remember to use quotes ("file1 file2 file3" or "\$(ls *.d)")
ADV                      (implies --scratch)
ADV     --cpback FILE    Copy back files from scratch from the job, which was start with FILE
ADV                      and remove the dir afterwards (useful after crash)

    QUEUE OPTIONS:
    -N  --NNNN           Number of cpus (also determines the queue together with walltime)
                         Possible: multiples of ${cores_per_node}
                         Default: $ncpus 
ADV     --nompi          This is NOT a mpi job, so do NOT add mpirun (or equivalent)
ADV                      to the command line (automatic for ncpus = 1)
        --walltime TIME  Change wall clock time
                         Default: $wall_time
ADV     --runat HOST     Specify the host to run yourself
ADV     --queue  NAME.q  Overwrite the queue to be used with NAME.q
ADV                      (also in the case of --queueinfo)


    JOBS OPTIONS:
        --showjobs        Show my jobs running (on $cluster_name)
        --alljobs         Show all jobs running (on $cluster_name)
ADV     --checkjob JOB_ID Return true if job is still running (useful with -f)
ADV                       "while ${0##*/} -q --checkjob JOB_ID; do :; done"
ADV     --pcheck PATTERN  Return true if at least one job matching a pattern is still running
ADV                       PATTERN is search in the name column (useful with -f)
ADV                       "while ${0##*/} -q --pcheck NAME; do :; done"
        --showlog  JOB_ID Show logfile for running job with number JOB_ID
ADV     --showdir  JOB_ID Show pwd of simulation
ADV     --taillog  JOB_ID Same as --showlog but tail and follow
        --killjob  JOB_ID Kill job with number JOB_ID
ADV     --statjob  JOB_ID Show status of the job with number JOB_ID
ADV     --pkill PATTERN   Kill all jobs matching a pattern
ADV     --getjid PATTERN  Retrun the ids of all jobs matching PATTERN
        --queueinfo [NR]  Show info about some queue [1|2|8] or all queues
ADV     --header          Show info header

    COMMON OPTIONS:
ADV     --                 End of options (if program starts with -)
ADV -q, --quiet            Be quiet
        --rcfile FILE      Extra setting file with defaults to read
                           Default: read only $rcfile if exist
ADV     --showdefaults     Show the default settings before reading $rcfile and the
ADV                        file given by --rcfile, useful to create own rcfile with:
ADV                        "${0##*/} --showdefaults > $rcfile"
ADV -v, --version          Prints version
        --selfupdate       Do a self update from googlecode
    -h, --help             Show short help message
        --longhelp         Show long help message

ADV Notes for usage of scratch space:
ADV ------------------------
ADV -The usage of the scratch space is complicated, use it with care!
ADV -Only use scratch space if you expect heavy input/output load
ADV -You may add the input files to copy to the scratch dir  with --needed
ADV  or use "--needed '*'", if want to copy all files of the current dir.
ADV -If the binary in not in your PATH, give the full path of binary or
ADV  add itself to --needed itself and use "./"
ADV -Remember, copying input files to the scratch dir and output file back here
ADV  takes time, so substract time needed for that from the wall of the actual simulation!

ADV Note for script variables:
ADV --------------------------
ADV The following variables are available in the batch script and can be used
ADV - npcus = Number of used cpus
ADV - walltime = Walltime in the format XX:XX:XX
ADV - wallsecs = Walltime in seconds
ADV - wallhours = Walltime in hours
ADV - nodes = hostname of the nodes used (e.g. host1,host2)
ADV - cnodes = hostname and cpus in the way GNU parallel takes it with --sshlogin

    Examples:
       ${0##*/} -8p sleep 30
       ${0##*/} --32 --nompi 'seq "${ncpus}" | parallel -n 0 --sshlogin "${cnodes}" hostname'
       ${0##*/} -8p --nompi mpirun -np 8 sleep 30
       ${0##*/} --name gromacs mdrun -v
       ${0##*/} -8 --needed topol.tpr mdrun_mpi
       ${0##*/} echo -e 'SOL\\\\nSOL' \| g_rdf -b 100 -n index.ndx
       ${0##*/} -8 --resubmit confout.gro --nompi mdrun -cpi state.cpt -maxh \\\$wallhours
       ${0##*/} -8 --source ~/myGromacs/GMXRC --resubmit confout.gro mdrun_mpi -append -cpi state.cpt -maxh \\\$wallhours
                (Note: -cpi is smart, the first time mdrun will start normal!)
       ${0##*/} -8 --needed '*' --resubmit confout.gro  mdrun_mpi -append -cpi state.cpt -maxh 35
                (Note: --needed '*' needs a separate dir for the simulation!)

    Send comments and bugs to: junghans@lanl.gov
eoh
}

show_logs() {
  local message path logfile
  [ -z "$2" ] && die "show_logs: Missing argument"
  number_check "$1" "--showlog/--taillog"
  message=$($job_status -v $1) || die
  path=$(echo -e "$message" | awk '/^IWD:/{ print $2}')
  logfile=$(echo -e "$message" | awk '/^OutputFile:/{ print $2}')
  $2 $path/$logfile
  return $?
}

show_path() {
  local message path
  [ -z "$1" ] && die "show_path: Missing argument"
  number_check "$1" "--showdir"
  message=$($job_status -v $1) || die
  path=$(echo -e "$message" | awk '/^IWD:/{ print $2}')
  [ -z "$path" ] && die "show_path: Could not get path"
  echo "$path"
  return $?
}

copy_back() {
  local path logfile host
  [ -z "$1" ] && die "copy_back: Missing argument"
  [ -f "$1" ] || die "copy_back: Could not found $1"
  [ -z "$(grep -e "${0##*/}" $1)" ] && die "$1 seems NOT to be a '${0##*/}' script"
  logfile=$(sed -n 's/^#MSUB -o //p' $1) || die "copy_back: could not get logfile"
  [ -f "${logfile}" ] || die "copy_back: logfile '$logfile' not found"
  host="$(sed -n 's/^Hi, I am job [0-9]* on \(.*\) in .*$/\1/p' "$logfile")"
  [ -z "$host" ] && die "copy_back: Could not get hostname for logfile '$logfile'"
  path="$(sed -n 's/^Starting simulation in \(.*\)$/\1/p' "$logfile")"
  [ -z "$path" ] && die "copy_back: Could not get path for logfile '$logfile'"
  echo Copying back data from $host:$path/ to .
  scp -Cpr "$host:$path/*" . || die "scp -Cr $host:$path/* . failed"
  echo Removing $path on $host
  ssh $host "rm -rf $path" || die "ssh $host rm -rf $path failed"
  return $?
}

get_path_from_script(){
  local path
  [ -z "$1" ] && die "get_path_from_script: Missing argument"
  [ -f "$1" ] || die "get_path_from_script: Could not found"
  [ -z "$(grep -e "${0##*/}" $1)" ] && die "$1 seems NOT to be a '${0##*/}' script"
  path="$(awk '/^cd/{print $2;exit 0}' $1)"
  [ -z "$path" ] && die "get_path_from_script: found not grep path from $1"
  echo "$path"
}

if [ -z "$(type -p mktemp)" ]; then
  mktemp() {
    [[ $1 = "-u" ]] && shift
    [[ -z $1 ]] && die "mktemp: missing argument"
    [[ -z ${1##*X} ]] || die "mktemp: argument has to end at least with X"
    local end trunc i l tmp newend
    end=${1##*[^X]}
    trunc=${1%${end}}
    l=${end//[^X]}
    l=${#l}
    while true; do
      newend="$end"
      for ((i=0;i<$l;i++)); do
        newend="${newend/X/${RANDOM:0:1}}"
      done
      tmp="${trunc}${newend}"
      [[ -f $tmp ]] || break
    done
    echo "$tmp"
  }
  export -f mktemp
fi

################################################
############## Main Program ####################
################################################
shopt -s extglob

cmdline="${0##*/}"
for i in "$@"; do
  [ -z "${i//*[[:space:]]*}" ] && cmdline="${cmdline} '$i'" || cmdline="${cmdline} $i"
done

if [ -f ${rcfile/\~/$HOME} ]; then
  source ${rcfile/\~/$HOME} || die "Error when sourcing $rcfile, correct it or remove it"
  #message after option parsing to avoid conflict with --showdefaults
  #qecho "I have sourced $rcfile"
fi

while [ "${1#-}" != "$1" ]; do
  if [ "${1#--}" = "$1" ] && [ -n "${1:2}" ]; then
    if [ "${1#-[nlmfr]}" != "${1}" ]; then
      set -- "${1:0:2}" "${1:2}" "${@:2}"
    else
      set -- "${1:0:2}" "-${1:2}" "${@:2}"
    fi
 fi
 case $1 in
  --rcfile )
   rcfile="$2"
   source $rcfile || die "Error when sourcing $rcfile, correct it or remove it"
   qecho "I have source $rcfile"
   shift 2;;
  --showdefaults )
   sed -ne '/^#BEGIN DEFAULTS/,/^#END DEFAULTS/p' $0 | sed -e '1d' -e '$d' -e '/^[^#]/s/^/#/'
   exit 0;;
  -[0-9] | --[0-9]* )
   #avoid confusion: -12 would be -1 -2 warn the user
   [ -n "$ncpus_set" ] && die "Number of cpu was set twice, first '$ncpus_set' and now '${1#-}', normally that is not desired!\nRemember '-12' is not same as '--12', but just shorthand notation for '-1 -2'"
   ncpus=${1#-}
   ncpus=${ncpus#-}
   number_check "$ncpus" "$1"
   ncpus_set="$ncpus"
   shift;;
  -p | --print )
   batchname="/dev/stdout"
   submit="no"
   shift;;
  -q | --quiet )
   quiet="yes"
   shift;;
   -l | --log )
   logfile="$2"
   shift 2;;
   --batch )
   batchname="$2"
   shift 2;;
   -n | --name )
   name="$2"
   shift 2;;
   -f | --finish )
   finish_file="$2"
   shift 2;;
   -a | --auto )
   auto="yes"
   shift ;;
  --script )
   scriptmode="yes"
   mpi_job="no"
   shift ;;
   --nosubmit | --norun)
   submit="no"
   shift ;;
   --submit)
   direct_submit="yes"
   submit_job "$2"
   exit $? ;;
   --template )
   template="$2"
   shift 2;;
   -e | --emptytemplate )
   template=""
   shift ;;
   --scratch )
   scratch="yes"
   shift ;;
   --needed )
   filelist=$2
   scratch="yes"
   shift 2;;
   -t | --time )
   time="yes"
   shift ;;
   -r | --resub | --resubmit)
   resubmit_file="$2"
   shift 2;;
   -w | --wait)
   wait="yes"
   shift 1;;
  --sleeptime)
   number_check "$2" "--sleeptime"
   sleeptime="$2"
   shift 2;;
  --header)
   echo "Job on $cluster_name"
   exit 0;;
   -m | --mail)
   mail="$2"
   shift 2 ;;
   --shell)
   myshell="$2"
   shift 2;;
   --source)
   extra_source="$2"
   shift 2 ;;
   --nompirun | --nompi)
   mpi_job="no"
   shift ;;
   --walltime )
   wall_time="$2"
   [ -z "${wall_time/[0-9][0-9]:[0-9][0-9]:[0-9][0-9]}" ] || die "Wall clock time should have the format HH:MM:SS"
   shift 2;;
   --runat )
   hostname="$2"
   shift 2;;
  --queue )
   specialq="$2"
   shift 2;;
   --showjobs )
   echo "Job on $cluster_name"
   $job_list -u "$USER"
   exit $?;;
   --alljobs )
   echo "Job on $cluster_name"
   $job_list -u all
   exit $?;;
   --cpback )
   copy_back $2
   exit $?;;
   --killjob )
   kill_job $2
   exit $?;;
   --statjob )
   stat_job $2
   exit $?;;
   --getjid )
   print_jobids "$2"
   exit $?;;
   --pkill )
   pkill_job "$2"
   exit $?;;
   --checkjob )
   check_job $2
   exit $?;;
   --pcheck )
   pcheck_job $2
   exit $?;;
   --queueinfo )
   queue_info $2
   exit $?;;
   --showdir )
   show_path "$2"
   exit $?;;
   --showlog )
   show_logs "$2" "cat"
   exit $?;;
   --taillog )
   show_logs "$2" "tailf"
   exit $?;;
  -v | --version)
   echo "${0##*/}, version $(get_version $0) ($branch branch) by C. Junghans & K. Koschke"
   exit 0;;
  --selfupdate)
   self_update
   exit $?;;
  --hg)
   echo "${0##*/}: $(sed -ne 's/^#version.* -- \(.*\)$/\1/p' $0 | sed -n '$p')"
   exit 0;;
  -h | --help)
   showhelp | sed -e '/^ADV /d' -e 's/^    //'
   exit 0;;
  --longhelp)
   showhelp | sed -e 's/^ADV/   /' -e 's/^    //'
   exit 0;;
  --)
   shift
   break;;
  *)
   die "Unknown option '$1'";;
 esac
done

if [[ -n $(type -p sha1sum) ]] && [[ $(${0} --showdefaults | sha1sum) != "f1b1b31e3cc8d5e8274e3d293ac457423beba8c6  -" ]]; then
  x=${0##*/}; x=${x//?/#}; y=${x//?/ }
  echo "###########################################$x$x"
  echo "# You have modified ${0##*/} internal settings !  $y#"
  echo "# Please do not do that as '${0##*/} --selfupdate'$y#"
  echo "# will overwrite them. Just run:          $y$y#"
  echo "# '${0##*/} --showdefaults > $rcfile'               #"
  echo "# and modify $rcfile                        $y#"
  echo "###########################################$x$x"
  unset x y
fi

#message after option parsing to avoid conflict with --showdefaults
[[ -f ${rcfile/\~/$HOME} ]] && qecho "I have sourced $rcfile"

if [ -z "$1" ]; then
  [ -z "${default_opts}" ] && die "Missing program name (try --help)"
  set -- ${default_opts}
fi

[[ $auto = "yes" ]] && name=${1##*/}

if [ -z "$batchname" ]; then
  #template contains no 'X'
  if [ -z "${template//[^X]}" ]; then
    batchname="${name}"
  else
    batchname=$(mktemp -u ${name}${template}) || die "mktemp could not generate file"
  fi
  touch ${batchname}
fi

if [ -z "$logfile" ]; then
  if [ "$batchname" = "/dev/stdout" ]; then
    logfile="$name.log"
  else
    logfile="$batchname.log"
  fi
fi

if [ "$batchname" != "/dev/stdout" ]; then
  qecho "submit script: $batchname"
  qecho "logfile: $logfile"
fi

if [ "$myshell" = "bash" ] || [ "$myshell" = "none" ]; then
  echo "#! /bin/bash" > $batchname
elif [ "$myshell" = "zsh" ]; then
  echo "#! /usr/bin/zsh" > $batchname
elif [ "$myshell" = "tcsh" ]; then
  echo "#! /bin/tcsh" > $batchname
else
  die "Unsupported shell"
fi

cat <<EOF >> $batchname
#This script is generated by $USER@$HOSTNAME
#on $(date)
#by the command "$cmdline"
#using ${0##*/}, version $(get_version $0)

#msub options
#MSUB -d ${PWD}
#MSUB -j oe
#MSUB -N ${batchname}
#MSUB -o $logfile
#MSUB -l nodes=$(( ( $ncpus -1 ) / ${cores_per_node} + 1 )):ppn=${cores_per_node}
EOF
[[ -n ${wall_time} ]] && echo "#MSUB -l walltime=${wall_time}" >> $batchname
[[ -n $specialq ]] && echo "#MSUB -q ${specialq}" >> $batchname
[[ -n $hostname ]] && echo "#MSUB -l hostname=${hostname}" >> $batchname

#To mail or not to mail
if [ -z "$mail" ] || [ "$mail" = "none" ]; then
  echo "#MSUB -m n" >> $batchname
else
  echo "#MSUB -m ae" >> $batchname
  [ "$mail" = "auto" ] && mail="${USER}@lanl.gov"
  echo "#MSUB -M $mail" >> $batchname
fi

if [ "$myshell" = "bash" ]; then
  echo "#MSUB -S /bin/bash" >> $batchname
  [ -f ~/.bashrc ] && sh_source="source ~/.bashrc"
elif [ "$myshell" = "zsh" ]; then
  echo "#MSUB -S /usr/bin/zsh" >> $batchname
  [ -f ~/.zshrc ] && sh_source="source ~/.zshrc"
elif [ "$myshell" = "tcsh" ]; then
  echo "#MSUB -S /bin/tcsh" >> $batchname
  if [ -f ~/.tcshrc ]; then
    sh_source="source ~/.tcshrc"
  elif [ -f ~/.cshrc ]; then
    sh_source="source ~/.cshrc"
  fi
  set="set "
elif [ "$myshell" = "none" ]; then
  echo "#MSUB -S /bin/bash" >> $batchname
fi

cat <<EOF >>$batchname

${sh_source}

#BEGIN useful script variables
${set}walltime=${wall_time}
${set}ncpus=${ncpus}
${set}wallsecs=$(walltime_to_sec ${wall_time})
${set}wallhours=$(( $(walltime_to_sec ${wall_time}) / 3600 ))
${set}nodes=\`mdiag -j \$SLURM_JOBID -r -v | sed -n "/Nodes/s/.*'\(.*\)'.*/\1/p"\`
#useful for GNU parallels --sshlogin option
${set}cnodes=\`echo \$nodes |  sed 's@\(,\|^\)@&${cores_per_node}/@g'\`
#END useful script variables

cd $PWD
echo Hi, I am job \$SLURM_JOBID on \$HOSTNAME in \$PWD

EOF
if [ -n "$extra_source" ]; then
  $(source $extra_source) || die "sourcing of file after --source failed, please check again"
  echo "source $extra_source" >> $batchname
fi
if [ "$scratch" = "yes" ]; then
  [[ "$time" = "yes" ]] && echo date >> $batchname
  cat <<EOF >>$batchname
#Copy the needed files
${set}olddir=\$PWD
${set}newdir=$scratch_dir/\$USER/\$SLURM_JOBID
mkdir -p \$newdir || exit 1
EOF
[ -n "$filelist" ] && cat <<EOF >>$batchname
echo Copy needed files:
echo $filelist
cp -r $filelist \$newdir
echo finished copying files
EOF
echo 'cd $newdir' >> $batchname
fi

if [ -n "${extra_begin_code}" ]; then
  cat <<EOF >>$batchname
#BEGIN of extra begin code
${extra_begin_code}
#END of extra begin code

EOF
fi

echo echo Starting simulation in \$PWD >> $batchname

[[ "$time" = "yes" ]] && echo date >> $batchname
if [ "$scriptmode" = "yes" ]; then
  for i in $@; do
    [ -f "$i" ] || die "File '$i' not found"
    cat "$i" >> $batchname
  done
  cmdline=""
else
  #do not add quotes to the first argument
  cmdline="$1"
  shift
  for i in "$@"; do
    [ -z "${i//*[[:space:]]*}" ] && cmdline="${cmdline} '$i'" || cmdline="${cmdline} $i"
  done
  if [ "$mpi_job" = "yes" ] && [ $ncpus -gt 1 ]; then
    cmdline="mpiexec -np $ncpus $cmdline"
  fi
fi

cat <<EOF >>$batchname
$cmdline
${set}result=\$?
[ \$result -ne 0 ] && echo "\$SLURM_JOBID finished unhappy!"
EOF

if [ -n "${extra_end_code}" ]; then
  cat <<EOF >>$batchname
#BEGIN of extra end code
${extra_end_code}
#END of extra end code
EOF
fi

if [ "$scratch" = "yes" ]; then
  [[ "$time" = "yes" ]] && echo date >> $batchname
  cat <<EOF >>$batchname

#Copy files back
echo Copy back files:
echo *
cp -ru * \$olddir
echo finished copying files
cd \$olddir
[ \$result -eq 0 ] && echo Removing scratch dir
[ \$result -eq 0 ] && rm -fr \$newdir
EOF
fi

[[ "$time" = "yes" ]] && echo date >> $batchname

if [ -n "$resubmit_file" ]; then
  [ -f "$resubmit_file" ] && die "Resub is already there, unlogical !"
  if [ "$batchname" = "/dev/stdout" ]; then
    echo Error: Resub and print options make no sense together >&2
    echo Error: Filename after $job_submit in next line will be wrong !!! >&2
  fi
  echo "[ \$result -eq 0 ] && [ ! -f '$resubmit_file' ] && $job_submit $PWD/$batchname" >> $batchname
  [ -z "$finish_file" ] || echo "[ \$result -eq 0 ] && [ -f $resubmit_file ] && touch $finish_file" >> $batchname
else
  [ -z "$finish_file" ] || echo "[ \$result -eq 0 ] && touch '$finish_file'" >> $batchname
fi

if [ "$submit" = "no" ]; then
  [[ "$batchname" != "/dev/stdout" ]] && qecho "to submit the script run: '${0##*/} --submit $batchname'"
  exit 0
fi

submit_job $batchname

if [ "$wait" = "yes" ]; then
  qecho "Waiting for $batchname to finish"
  quiet="yes"
  while pcheck_job $batchname; do
    sleep $sleeptime;
  done
  [[ -n "${finish_file}" ]] && [[ ! -f "$finish_file" ]] && exit 1
  [[ -n "${resubmit_file}" ]] && [[ ! -f "$resubmit_file" ]] && exit 1
  exit 0
fi
