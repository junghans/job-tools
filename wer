#! /usr/bin/perl -w
# wer
#
# (C) 2007-2009 Chr. Junghans
#version 1.3   06.02.08 -- old version
#version 1.3.1 08.10.09 -- add new version system

use strict;

my $list=$ENV{HOME}.'/.wer-hosts';
my $maxmin=30;
my $output=undef;
$_=$0;
s#^.*/##;
my $progname=$_;
my $usage="Usage: $progname [OPTIONS]";
my $quiet=undef;
my $all=undef;

while ((defined ($ARGV[0])) and ($ARGV[0] =~ /^-./)){
        if (($ARGV[0] !~ /^--/) and (length($ARGV[0])>2)){
           $_=shift(@ARGV);
           if ( $_ =~ /^-[lo]/ ) {
              unshift(@ARGV,substr($_,0,2),substr($_,2));
           }
           else{
              unshift(@ARGV,substr($_,0,2),"-".substr($_,2));
           }
        }
	if (($ARGV[0] eq "-h") or ($ARGV[0] eq "--help")){
		print <<EOH;
Find logined user on host from a list!
$usage
-l, --list FILE  Changes the name of the listfile
                 Default: '$list'
-a, --all        using 'findhost pckr' command as hosts
                 (ignores -l)
-o FILE          Output to file
                 Default: STOUT
-h, --help       Show this help message
-q, --quiet      Be quiet
-v, --version    Prints version
EOH
		exit;
	}
	elsif (($ARGV[0] eq "-l") or ($ARGV[0] eq "--list")){
		shift(@ARGV);
		$list=shift(@ARGV);
	}
	elsif (($ARGV[0] eq "-a") or ($ARGV[0] eq "--all")){
		shift(@ARGV);
		$all="yes";
	}
	elsif ($ARGV[0] eq "-o"){
		shift(@ARGV);
		$output=shift(@ARGV);
	}
        elsif (($ARGV[0] eq "-v") or ($ARGV[0] eq "--version"))
        {
           my $version=`perl -ne 'print "\$1\n" if /^#(version .*?) --/' $0 | perl -ne 'print if eof'`;
           chomp($version);
           print "$progname, $version  by C. Junghans\n";
           exit;
        }
        elsif ($ARGV[0] eq "--hg")
        {
           my $message=`perl -ne 'print "\$1\n" if /^#version .*? -- (.*)\$/' $0 | perl -ne 'print if eof'`;
           chomp($message);
           print "$progname: $message\n";
           exit;
        }
        elsif (($ARGV[0] eq "-q") or ($ARGV[0] eq "--quiet")){
		shift(@ARGV);
        	$quiet="yes";
	}
	else{
		print "Unknow option \'$ARGV[0]\' - ignored !\n";
		shift(@ARGV);
	}
}

my @hostlist;
unless (defined($all)){
	if ( -r "$list" ){
		print "Using hostlist \'$list\'\n" unless defined($quiet);
		open (FILE,$list) or die "Error opening $list";
		while (<FILE>){
			chomp($_);
			push(@hostlist,$_) unless $_ =~ /^#/;
		}
		close(FILE);
	}
	else{
		print "Hostfile not readable! -> using \'--all\' option\n";
		$all="yes";
	}
}

if (defined($all)){
	print "Using all hosts 'findhost pckr' command\n" unless defined($quiet);
	open(FHOST,"findhost pckr |");
	while (<FHOST>){
		chomp($_);
                push(@hostlist,$_);
        }
        close(FHOST) or die "findhost command not found!\n";
}

my %useronhost;
foreach my $host (@hostlist){
	print "Checking $host." unless defined($quiet);
	open(WHO,"ssh -q -q -f $host who -u 2> /dev/null |");
	while (<WHO>){
		if ($_ =~ /(\w+).+\d{2}:\d{2}\s+(\d{2}:\d{2}|old|\?|\.)/){
			print "." unless defined($quiet);
			my $user=$1;
			my $idletime=$2;
			# . is equal to now
			$idletime="00:00" if "$idletime" eq ".";
			#old and ? will not be ignored
			if ( ($idletime =~ /(\d{2}):(\d{2})/) && (60*$1+$2<=$maxmin) ){
				$useronhost{$user}.=" $host," unless (exists($useronhost{$user}) and $useronhost{$user}=~/$host/);
			}
		}
	}
	defined($quiet)?close(WHO):(close (WHO)?print ".ready\n":print ".failed! \n");
}

(open(OUT,"> $output") or die "Error at opening \'$output\'\n") if defined($output);
foreach (sort { lc($a) cmp lc($b) } keys %useronhost) {
	chop($useronhost{$_});
	defined($output)?print OUT "$_     \t$useronhost{$_}\n":print "$_     \t$useronhost{$_}\n";
}
close(OUT) if defined($output);
